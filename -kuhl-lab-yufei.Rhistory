geom_bar(stat="identity") +
theme_minimal()
}
elev_plots <- map(expl, ~explore_fun(.x, "score"))
elev_plots[17]
school_char <- import(here::here('data','extra_data','school_characteristics','ccd_sch_129_1718_w_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, TITLEI_STATUS, NSLP_STATUS, VIRTUAL) %>%
janitor::clean_names()  %>%
mutate(ncessch = as.double(ncessch))
# join df and school_char by ncessch
df <- df %>%
left_join(school_char)
# 3) lunch eligibility
lunch_elig <- import(here::here('data','extra_data','lunch_program_eligibility','ccd_sch_033_1718_l_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, LUNCH_PROGRAM, STUDENT_COUNT)  %>%
janitor::clean_names()  %>%
select(ncessch, lunch_program, student_count)  %>%
mutate(student_count = replace_na(student_count, 0))  %>%
pivot_wider(names_from = lunch_program,
values_from = student_count)  %>%
janitor::clean_names()  %>%
mutate(ncessch = as.double(ncessch))
stu_counts <- import("https://github.com/datalorax/ach-gap-variability/raw/master/data/achievement-gaps-geocoded.csv",
setclass = "tbl_df")  %>%
filter(state == "OR" & year == 1718)  %>%
count(ncessch, wt = n)  %>%
mutate(ncessch = as.double(ncessch))
lunch_elig <- left_join(lunch_elig, stu_counts)
df <- df %>%
left_join(lunch_elig)
# 4) directory
directory <- import(here::here('data','extra_data','directory','ccd_sch_029_1718_w_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, SCH_TYPE_TEXT, CHARTER_TEXT) %>%
janitor::clean_names() %>%
mutate(ncessch = as.double(ncessch))
df <- df %>%
left_join(directory)
# 5) membership
sheets <- readxl::excel_sheets(here::here('data','extra_data','fallmembershipreport_20192020.xlsx'))
ode_schools <- readxl::read_xlsx(here::here('data','extra_data','fallmembershipreport_20192020.xlsx'),
sheet = sheets[4])
ethnicities <- ode_schools %>%
select(attnd_schl_inst_id = `Attending School ID`,
attnd_dist_inst_id = `Attending District Institution ID`,
sch_name = `School Name`,
contains('%')) %>%
janitor::clean_names()
names(ethnicities) <- gsub('x2019_20_percent', 'p', names(ethnicities))
df <- df %>%
left_join(ethnicities)
df <- df%>%
modify_if(is.character, as.factor)
(df_skim <- skim(df))
df <-  df %>%
select(-calc_admn_cd)
factor_vars <-
df_skim %>%
filter(skim_type == 'factor') %>%
select(skim_variable)
factor_vars$skim_variable[-34] %>%
map(~tabyl(df,.))
df_forvip <- df %>%
drop_na()
df_forvip <-  df_forvip  %>%
select(-ayp_dist_partic , -rc_dist_partic, -grp_rpt_dist_partic)
#vip(lm(score ~ ., df_forvip), mapping = aes(fill = Sign))
write.csv(df, 'final_merged_train.csv', row.names = F)
library(tidyverse)
library(rio)
library(vip)
library(skimr)
library(janitor)
# Original training set
math <- import(here::here('data','train.csv')) %>%
mutate(ncessch = as.double(ncessch)) %>%
select(-classification) %>%
mutate(lang_cd = ifelse(is.na(lang_cd), "E", lang_cd),
ayp_lep = ifelse(is.na(ayp_lep), "G", ayp_lep))
# add in extra data
# 1) staff
staff <- import(here::here('data','extra_data','staff','ccd_sch_059_1718_l_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, TEACHERS) %>% # Teachers: number of teachers (numeric)
janitor::clean_names() %>%
mutate(ncessch = as.double(ncessch))
# join math and staff by ncessch
df <- math %>%
left_join(staff)
# 2) scool characteristics
# clean the school characteristic dataset
schoolDf <- import(here::here('data','extra_data','school_characteristics','ccd_sch_129_1718_w_1a_083118.csv'))%>%
filter(ST == "OR") %>%
janitor::clean_names() %>%
mutate(ncessch = as.double(ncessch)) %>%
modify_if(is.character, as.factor)
# Merge with the full dataset
fullDf <- left_join(math, schoolDf, by= "ncessch") %>%
select(score, colnames(schoolDf))
# Plot bar graph to explore the data
expl <- names(fullDf[,2:21])
# func for map
explore_fun <- function(x, y) {
ggplot(fullDf, aes(x = .data[[x]], y = .data[[y]]) ) +
geom_bar(stat="identity") +
theme_minimal()
}
elev_plots <- map(expl, ~explore_fun(.x, "score"))
school_char <- import(here::here('data','extra_data','school_characteristics','ccd_sch_129_1718_w_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, TITLEI_STATUS, NSLP_STATUS, VIRTUAL) %>%
janitor::clean_names()  %>%
mutate(ncessch = as.double(ncessch))
# join df and school_char by ncessch
df <- df %>%
left_join(school_char)
# 3) lunch eligibility
lunch_elig <- import(here::here('data','extra_data','lunch_program_eligibility','ccd_sch_033_1718_l_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, LUNCH_PROGRAM, STUDENT_COUNT)  %>%
janitor::clean_names()  %>%
select(ncessch, lunch_program, student_count)  %>%
mutate(student_count = replace_na(student_count, 0))  %>%
pivot_wider(names_from = lunch_program,
values_from = student_count)  %>%
janitor::clean_names()  %>%
mutate(ncessch = as.double(ncessch))
stu_counts <- import("https://github.com/datalorax/ach-gap-variability/raw/master/data/achievement-gaps-geocoded.csv",
setclass = "tbl_df")  %>%
filter(state == "OR" & year == 1718)  %>%
count(ncessch, wt = n)  %>%
mutate(ncessch = as.double(ncessch))
lunch_elig <- left_join(lunch_elig, stu_counts)
lunch_elig <- lunch_elig %>%
mutate(free_lunch_prop = free_lunch_qualified / n,
reduced_lunch_prop = reduced_price_lunch_qualified / n)  %>%
select(ncessch, ends_with("prop"))
df <- df %>%
left_join(lunch_elig)
# 4) directory
directory <- import(here::here('data','extra_data','directory','ccd_sch_029_1718_w_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, SCH_TYPE_TEXT, CHARTER_TEXT) %>%
janitor::clean_names() %>%
mutate(ncessch = as.double(ncessch))
df <- df %>%
left_join(directory)
# 5) membership
sheets <- readxl::excel_sheets(here::here('data','extra_data','fallmembershipreport_20192020.xlsx'))
ode_schools <- readxl::read_xlsx(here::here('data','extra_data','fallmembershipreport_20192020.xlsx'),
sheet = sheets[4])
ethnicities <- ode_schools %>%
select(attnd_schl_inst_id = `Attending School ID`,
attnd_dist_inst_id = `Attending District Institution ID`,
sch_name = `School Name`,
contains('%')) %>%
janitor::clean_names()
names(ethnicities) <- gsub('x2019_20_percent', 'p', names(ethnicities))
df <- df %>%
left_join(ethnicities)
df <- df%>%
modify_if(is.character, as.factor)
(df_skim <- skim(df))
df <-  df %>%
select(-calc_admn_cd)
df_forvip <- df %>%
drop_na()
df_forvip <-  df_forvip  %>%
select(-ayp_dist_partic , -rc_dist_partic, -grp_rpt_dist_partic)
#vip(lm(score ~ ., df_forvip), mapping = aes(fill = Sign))
write.csv(df, 'final_merged_train.csv', row.names = F)
lunch_elig <- import(here::here('data','extra_data','lunch_program_eligibility','ccd_sch_033_1718_l_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, LUNCH_PROGRAM, STUDENT_COUNT)  %>%
janitor::clean_names()  %>%
select(ncessch, lunch_program, student_count)  %>%
mutate(student_count = replace_na(student_count, 0))  %>%
pivot_wider(names_from = lunch_program,
values_from = student_count)  %>%
janitor::clean_names()  %>%
mutate(ncessch = as.double(ncessch))
stu_counts <- import("https://github.com/datalorax/ach-gap-variability/raw/master/data/achievement-gaps-geocoded.csv",
setclass = "tbl_df")  %>%
filter(state == "OR" & year == 1718)  %>%
count(ncessch, wt = n)  %>%
mutate(ncessch = as.double(ncessch))
stu_counts <- import("https://github.com/datalorax/ach-gap-variability/raw/master/data/achievement-gaps-geocoded.csv",
setclass = "tbl_df")  %>%
filter(state == "OR" & year == 1718)  %>%
count(ncessch, wt = n)  %>%
mutate(ncessch = as.double(ncessch))
stu_counts
math_dic <- import(here::here('data', 'data_dictionary.csv'))
math_dic
print(math_dic)
View(math_dic)
print(table(math_dic))
table(math_dic)
colnames(math_dic)
math_dic$description
dic <- import(here::here('data', 'data_dictionary.csv'))
dic <- import(here::here('data', 'data_dictionary.csv'))
dic
dic
knitr::kable(dic)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
cache = TRUE,
echo = TRUE,
cache.lazy = FALSE)
library(tidyverse)
library(tidymodels)
library(baguette)
library(future)
library(rio)
library(vip)
library(rpart.plot)
library(tictoc)
library(future)
theme_set(theme_minimal())
# read in the final merged data
df <- import(here::here('data','final_merged_train.csv'))
# split to training and testing
df_split <- initial_split(df, strata = "score")
# specify training and testing sets
df_train <- training(df_split)
df_test <- testing(df_split)
# cross-validation
df_cv <- vfold_cv(df_train,  strata = "score")
rf_rec <- recipe(score ~ ., df_train) %>%
step_mutate(tst_dt = as.numeric(tst_dt)) %>%
step_rm(contains('bnch')) %>%
update_role(contains('id'), ncessch, sch_name, new_role = 'id') %>%
step_novel(all_nominal())  %>%
step_unknown(all_nominal(), -all_outcomes()) %>%
step_medianimpute(all_numeric()) %>%
step_dummy(all_nominal(), -has_role(match = 'id'), -all_outcomes()) %>%
step_nzv(all_predictors(), freq_cut = 0, unique_cut = 0)
rf_rec %>% prep()
library(ranger)
(cores <- parallel::detectCores())
mod_ran <-
rand_forest() %>%
set_engine('ranger',
num.threads = 7,
importance = 'permutation',
verbose = T) %>%
set_mode('regression') %>%
set_args(trees = 1000,
mtry = tune(),
min_n = tune())
ran_params  <- parameters(mtry(range = c(1,55)), min_n(range = c(1,80)))
ran_grid <- grid_max_entropy(ran_params, size = 20)
ran_grid %>%
ggplot(aes(mtry, min_n)) +
geom_point()
library(ranger)
(cores <- parallel::detectCores())
mod_ran <-
rand_forest() %>%
set_engine('ranger',
num.threads = 7,
importance = 'permutation',
verbose = T) %>%
set_mode('regression') %>%
set_args(trees = 1000,
mtry = tune(),
min_n = tune())
ran_params  <- parameters(mtry(range = c(1,57)), min_n(range = c(1,80)))
ran_grid <- grid_max_entropy(ran_params, size = 20)
ran_grid %>%
ggplot(aes(mtry, min_n)) +
geom_point()
wf_ran <-  workflow() %>%
add_model(mod_ran) %>%
add_recipe(rf_rec)
metrics_eval <- metric_set(rmse)
plan(multisession)
tic()
tune_ran <- tune_grid(
wf_ran,
df_cv,
grid = ran_grid,
metrics = metrics_eval,
control = control_resamples(verbose = TRUE,
save_pred = TRUE,
extract = function(x) x))
# read in the final merged data
df <- import(here::here('data','final_merged_train.csv')) %>%
sample_frac(.05)
# split to training and testing
df_split <- initial_split(df, strata = "score")
# specify training and testing sets
df_train <- training(df_split)
df_test <- testing(df_split)
# cross-validation
df_cv <- vfold_cv(df_train,  strata = "score")
rf_rec <- recipe(score ~ ., df_train) %>%
step_mutate(tst_dt = as.numeric(tst_dt)) %>%
step_rm(contains('bnch')) %>%
update_role(contains('id'), ncessch, sch_name, new_role = 'id') %>%
step_novel(all_nominal())  %>%
step_unknown(all_nominal(), -all_outcomes()) %>%
step_medianimpute(all_numeric()) %>%
step_dummy(all_nominal(), -has_role(match = 'id'), -all_outcomes()) %>%
step_nzv(all_predictors(), freq_cut = 0, unique_cut = 0)
rf_rec %>% prep()
library(ranger)
(cores <- parallel::detectCores())
mod_ran <-
rand_forest() %>%
set_engine('ranger',
num.threads = 7,
importance = 'permutation',
verbose = T) %>%
set_mode('regression') %>%
set_args(trees = 1000,
mtry = tune(),
min_n = tune())
ran_params  <- parameters(mtry(range = c(1,57)), min_n(range = c(1,80)))
ran_grid <- grid_max_entropy(ran_params, size = 20)
ran_grid %>%
ggplot(aes(mtry, min_n)) +
geom_point()
wf_ran <-  workflow() %>%
add_model(mod_ran) %>%
add_recipe(rf_rec)
metrics_eval <- metric_set(rmse)
plan(multisession)
tic()
tune_ran <- tune_grid(
wf_ran,
df_cv,
grid = ran_grid,
metrics = metrics_eval,
control = control_resamples(verbose = TRUE,
save_pred = TRUE,
extract = function(x) x))
toc()
plan(sequential)
tune_ran %>%
collect_metrics(summarize = T) %>%
ggplot(aes(mtry, mean, color = factor(min_n))) +
geom_point() +
ylab('avg_rmse') +
ggtitle('Tunning hyperparameters')
ran_best <- tune_ran %>%
show_best('rmse', n = 1)
ran_best
mod_ran_final <- mod_ran %>%
finalize_model(ran_best)
wf_final <- workflow() %>%
add_model(mod_ran_final) %>%
add_recipe(rf_rec)
# fit full train
test_mod <- fit(wf_final, data = df_train)
# OOB rmse for full training
sqrt(test_mod$fit$fit$fit$prediction.error)
test <- fit(wf_final, data = df_test)
# OOB rmse for testing
sqrt(test$fit$fit$fit$prediction.error)
test <- import(here::here('data','train.csv')) %>%
mutate(ncessch = as.double(ncessch)) %>%
select(-classification) %>%
mutate(lang_cd = ifelse(is.na(lang_cd), "E", lang_cd),
ayp_lep = ifelse(is.na(ayp_lep), "G", ayp_lep))
test_full <- test %>%
left_join(staff)
write.csv(df, here::here('data','final_merged_test.csv'), row.names = F)
write.csv(test_full, here::here('data','final_merged_test.csv'), row.names = F)
test <- import(here::here('data','train.csv')) %>%
mutate(ncessch = as.double(ncessch)) %>%
select(-classification) %>%
mutate(lang_cd = ifelse(is.na(lang_cd), "E", lang_cd),
ayp_lep = ifelse(is.na(ayp_lep), "G", ayp_lep))
# join staff dataser
test_full <- test %>%
left_join(staff)
# join school characteristic dataset
test_full <- test_full %>%
left_join(school_char)
# join lunch eligibility dataset
test_full <- test_full %>%
left_join(lunch_elig)
# join directory dataset
test_full <- test_full %>%
left_join(directory)
# join membership dataset
test_full <- test_full %>%
left_join(ethnicities)
write.csv(test_full, here::here('data','final_merged_test.csv'), row.names = F)
# read in the final merged data
df <- import(here::here('data','final_merged_train.csv')) %>%
sample_frac(.05)
# read in the final merged data
df <- import(here::here('data','final_merged_train.csv')) %>%
sample_frac(.01)
# split to training and testing
df_split <- initial_split(df, strata = "score")
# specify training and testing sets
df_train <- training(df_split)
df_test <- testing(df_split)
# cross-validation
df_cv <- vfold_cv(df_train,  strata = "score")
df_train$tst_bnch
staff <- import(here::here('data','extra_data','staff','ccd_sch_059_1718_l_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, TEACHERS) %>% # Teachers: number of teachers (numeric)
janitor::clean_names() %>%
mutate(ncessch = as.double(ncessch))
school_char <- import(here::here('data','extra_data','school_characteristics','ccd_sch_129_1718_w_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, TITLEI_STATUS, NSLP_STATUS, VIRTUAL) %>%
janitor::clean_names()  %>%
mutate(ncessch = as.double(ncessch))
lunch_elig <- import(here::here('data','extra_data','lunch_program_eligibility','ccd_sch_033_1718_l_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, LUNCH_PROGRAM, STUDENT_COUNT)  %>%
janitor::clean_names()  %>%
select(ncessch, lunch_program, student_count)  %>%
mutate(student_count = replace_na(student_count, 0))  %>%
pivot_wider(names_from = lunch_program,
values_from = student_count)  %>%
janitor::clean_names()  %>%
mutate(ncessch = as.double(ncessch))
stu_counts <- import("https://github.com/datalorax/ach-gap-variability/raw/master/data/achievement-gaps-geocoded.csv",
setclass = "tbl_df")  %>%
filter(state == "OR" & year == 1718)  %>%
count(ncessch, wt = n)  %>%
mutate(ncessch = as.double(ncessch))
lunch_elig <- left_join(lunch_elig, stu_counts)
lunch_elig <- lunch_elig %>%
mutate(free_lunch_prop = free_lunch_qualified / n,
reduced_lunch_prop = reduced_price_lunch_qualified / n)  %>%
select(ncessch, ends_with("prop"))
directory <- import(here::here('data','extra_data','directory','ccd_sch_029_1718_w_1a_083118.csv')) %>%
filter(ST == "OR")  %>%
select(NCESSCH, SCH_TYPE_TEXT, CHARTER_TEXT) %>%
janitor::clean_names() %>%
mutate(ncessch = as.double(ncessch))
sheets <- readxl::excel_sheets(here::here('data','extra_data','fallmembershipreport_20192020.xlsx'))
ode_schools <- readxl::read_xlsx(here::here('data','extra_data','fallmembershipreport_20192020.xlsx'),
sheet = sheets[4])
ethnicities <- ode_schools %>%
select(attnd_schl_inst_id = `Attending School ID`,
attnd_dist_inst_id = `Attending District Institution ID`,
sch_name = `School Name`,
contains('%')) %>%
janitor::clean_names()
names(ethnicities) <- gsub('x2019_20_percent', 'p', names(ethnicities))
test <- import(here::here('data','train.csv')) %>%
mutate(ncessch = as.double(ncessch)) %>%
select(-classification) %>%
mutate(lang_cd = ifelse(is.na(lang_cd), "E", lang_cd),
ayp_lep = ifelse(is.na(ayp_lep), "G", ayp_lep))
# join staff dataser
test_full <- test %>%
left_join(staff)
# join school characteristic dataset
test_full <- test_full %>%
left_join(school_char)
# join lunch eligibility dataset
test_full <- test_full %>%
left_join(lunch_elig)
# join directory dataset
test_full <- test_full %>%
left_join(directory)
# join membership dataset
test_full <- test_full %>%
left_join(ethnicities)
test_full <- test_full%>%
modify_if(is.character, as.factor)
test_full <-  test_full %>%
select(-calc_admn_cd)
write.csv(test_full, here::here('data','final_merged_test.csv'), row.names = F)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE,
cache = TRUE,
echo = TRUE,
cache.lazy = FALSE)
library(tidyverse)
library(tidymodels)
library(baguette)
library(future)
library(rio)
library(vip)
library(rpart.plot)
library(tictoc)
library(future)
theme_set(theme_minimal())
library(tidyverse)
library(tidymodels)
library(baguette)
library(future)
library(rio)
library(vip)
library(rpart.plot)
library(tictoc)
library(future)
theme_set(theme_minimal())
# read in the final merged data
df <- import(here::here('data','final_merged_train.csv')) %>%
sample_frac(.05)
# split to training and testing
df_split <- initial_split(df, strata = "score")
# specify training and testing sets
df_train <- training(df_split)
df_test <- testing(df_split)
# cross-validation
df_cv <- vfold_cv(df_train,  strata = "score")

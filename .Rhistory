knitr::opts_chunk$set(cache = TRUE)
library(tidyverse)
full_train <- read_csv(here::here("data", "final_merged_train.csv"),
col_types = cols(.default = col_guess()))
library(tidymodels)
math <- full_train
math_split <- initial_split(math, strata = "ethnic_cd")
math_train <- training(math_split)
math_test <- testing(math_split)
math_cv <- vfold_cv(math_train, strata = "ethnic_cd")
mod <- linear_reg()  %>%
set_mode("regression")  %>%
set_engine("lm")
ggplot(math_train, aes(lat, score)) +
geom_smooth()
ggplot(math_train, aes(lon, score)) +
geom_smooth()
math_train %>%
mutate(tst_dt =lubridate::mdy_hms(tst_dt)) %>%
mutate(tst_dt = as.numeric(tst_dt)) %>%
ggplot(aes(tst_dt, score)) +
geom_smooth()
rec <- recipe(score ~ ., data = math_train)  %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt),
tst_dt_num = as.numeric(tst_dt)) %>%
update_role(tst_dt, new_role = "time_index")  %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars")  %>%
step_novel(all_nominal())  %>%
step_unknown(all_nominal())  %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars"))  %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal(), -tst_dt) %>%
step_nzv(all_predictors()) %>%
step_ns(lat, deg_free = 10)  %>%
step_ns(lon, deg_free = 9) %>%
step_ns(tst_dt_num, deg_free = 7)  %>%
step_interact(terms = ~ enrl_grd:contains("sp_ed_fg")) %>%
step_interact(terms = ~ starts_with("ethnic"):ends_with("prop")) %>%
step_nzv(all_predictors())
rec %>% prep()
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
mod_update <- mod %>%
fit_resamples(preprocessor = rec,
resamples = math_cv,
control = control_resamples(verbose = TRUE))
stopCluster(cl)
mod_update %>%
collect_metrics()
mod_update
mod_update <- mod %>%
fit_resamples(preprocessor = rec,
resamples = math_cv,
control = control_resamples(verbose = TRUE))
mod_update <- mod %>%
fit_resamples(preprocessor = rec,
resamples = math_cv,
control = control_resamples(verbose = TRUE))
registerDoParallel(cl)
mod_update <- mod %>%
fit_resamples(preprocessor = rec,
resamples = math_cv,
control = control_resamples(verbose = TRUE))
mod_update <- mod %>%
fit_resamples(preprocessor = rec,
resamples = math_cv,
control = control_resamples(verbose = TRUE))
stopCluster(cl)
mod_update <- mod %>%
fit_resamples(preprocessor = rec,
resamples = math_cv,
control = control_resamples(verbose = TRUE))
knitr::opts_chunk$set(cache = TRUE)
library(tidyverse)
full_train <- read_csv(here::here("data", "final_merged_train.csv"),
col_types = cols(.default = col_guess()))
library(tidymodels)
math <- full_train
math_split <- initial_split(math, strata = "ethnic_cd")
math_train <- training(math_split)
math_test <- testing(math_split)
math_cv <- vfold_cv(math_train, strata = "ethnic_cd")
mod <- linear_reg()  %>%
set_mode("regression")  %>%
set_engine("lm")
ggplot(math_train, aes(lat, score)) +
geom_smooth()
ggplot(math_train, aes(lon, score)) +
geom_smooth()
math_train %>%
mutate(tst_dt =lubridate::mdy_hms(tst_dt)) %>%
mutate(tst_dt = as.numeric(tst_dt)) %>%
ggplot(aes(tst_dt, score)) +
geom_smooth()
rec <- recipe(score ~ ., data = math_train)  %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt),
tst_dt_num = as.numeric(tst_dt)) %>%
update_role(tst_dt, new_role = "time_index")  %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars")  %>%
step_novel(all_nominal())  %>%
step_unknown(all_nominal())  %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars"))  %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal(), -tst_dt) %>%
step_nzv(all_predictors()) %>%
step_ns(lat, deg_free = 10)  %>%
step_ns(lon, deg_free = 9) %>%
step_ns(tst_dt_num, deg_free = 7)  %>%
step_interact(terms = ~ enrl_grd:contains("sp_ed_fg")) %>%
step_interact(terms = ~ starts_with("ethnic"):ends_with("prop")) %>%
step_nzv(all_predictors())
rec %>% prep()
mod_update <- mod %>%
fit_resamples(preprocessor = rec,
resamples = math_cv,
control = control_resamples(verbose = TRUE))
rec <- recipe(score ~ ., data = math_train)  %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt),
tst_dt_num = as.numeric(tst_dt)) %>%
update_role(tst_dt, new_role = "time_index")  %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars")  %>%
step_novel(all_nominal())  %>%
step_unknown(all_nominal())  %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars"))  %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal(), -tst_dt) %>%
step_nzv(all_predictors()) %>%
step_ns(lat, deg_free = 10)  %>%
step_ns(lon, deg_free = 9) %>%
step_ns(tst_dt_num, deg_free = 7)  %>%
step_interact(terms = ~ enrl_grd:contains("sp_ed_fg")) %>%
step_interact(terms = ~ starts_with("ethnic"):ends_with("prop"))
mod_update <- mod %>%
fit_resamples(preprocessor = rec,
resamples = math_cv,
control = control_resamples(verbose = TRUE))
mod_update %>%
collect_metrics()
tune_mod <- linear_reg(penalty = tune(), mixture = tune())  %>%
set_mode("regression")  %>%
set_engine("glmnet")
tune_mod <- linear_reg(penalty = tune(), mixture = tune())  %>%
set_mode("regression")  %>%
set_engine("glmnet")
grid_to_tune <- grid_regular(penalty(), mixture(), levels = 25)
tune_mod <- linear_reg(penalty = tune(), mixture = tune())  %>%
set_mode("regression")  %>%
set_engine("glmnet")
grid_to_tune <- grid_regular(penalty(), mixture(), levels = 25)
enet_tune <- tune_grid(
tune_mod,
rec,
math_cv,
grid = grid_to_tune,
control = control_resamples(verbose = TRUE)
)
enet_tune %>%
collect_metrics()
select_best(enet_tune)
show_best(enet_tune)
show_best(enet_tune, metric = "rmse")
?step_novel
?step_nzv
rec <- recipe(score ~ ., data = math_train)  %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt),
tst_dt_num = as.numeric(tst_dt)) %>%
update_role(tst_dt, new_role = "time_index")  %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars")  %>%
step_novel(all_nominal())  %>%
step_unknown(all_nominal())  %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars"))  %>%
step_nzv(all_predictors()) %>%
step_normalize(all_numeric(), -score) %>%
step_dummy(all_nominal(), -tst_dt) %>%
step_nzv(all_predictors()) %>%
step_ns(lat, deg_free = 10)  %>%
step_ns(lon, deg_free = 9) %>%
step_ns(tst_dt_num, deg_free = 7)  %>%
step_interact(terms = ~ enrl_grd:contains("sp_ed_fg")) %>%
step_interact(terms = ~ starts_with("ethnic"):ends_with("prop"))
rec %>% prep()
rec <- recipe(score ~ ., data = math_train)  %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt),
tst_dt_num = as.numeric(tst_dt)) %>%
update_role(tst_dt, new_role = "time_index")  %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars")  %>%
step_novel(all_nominal())  %>%
step_unknown(all_nominal())  %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars"))  %>%
step_nzv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -tst_dt) %>%
step_nzv(all_predictors()) %>%
step_ns(lat, deg_free = 10)  %>%
step_ns(lon, deg_free = 9) %>%
step_ns(tst_dt_num, deg_free = 7)  %>%
step_interact(terms = ~ enrl_grd:contains("sp_ed_fg")) %>%
step_interact(terms = ~ starts_with("ethnic"):ends_with("prop"))
rec %>% prep()
grid_to_tune
ggplot(grid_to_tune, aes(penalty, mixture)) +
geom_point()
grid_to_tune
ggplot(grid_to_tune, aes(penalty, mixture)) +
geom_point()
knitr::opts_chunk$set(cache = TRUE)
set.seed(210)
library(tidyverse)
full_train <- read_csv(here::here("data", "final_merged_train.csv"),
col_types = cols(.default = col_guess()))
library(tidymodels)
math <- full_train
math_split <- initial_split(math, strata = "ethnic_cd")
math_train <- training(math_split)
math_test <- testing(math_split)
ggplot(math_train, aes(lat, score)) +
geom_smooth()
ggplot(math_train, aes(lon, score)) +
geom_smooth()
math_train %>%
mutate(tst_dt =lubridate::mdy_hms(tst_dt)) %>%
mutate(tst_dt = as.numeric(tst_dt)) %>%
ggplot(aes(tst_dt, score)) +
geom_smooth()
rec <- recipe(score ~ ., data = math_train)  %>%
step_mutate(tst_dt = lubridate::mdy_hms(tst_dt),
tst_dt_num = as.numeric(tst_dt)) %>%
update_role(tst_dt, new_role = "time_index")  %>%
update_role(contains("id"), ncessch, sch_name, new_role = "id vars")  %>%
step_novel(all_nominal())  %>%
step_unknown(all_nominal())  %>%
step_medianimpute(all_numeric(), -all_outcomes(), -has_role("id vars"))  %>%
step_nzv(all_predictors()) %>%
step_normalize(all_numeric(), -all_outcomes(), -has_role("id vars")) %>%
step_dummy(all_nominal(), -tst_dt) %>%
step_nzv(all_predictors()) %>%
step_ns(lat, deg_free = 10)  %>%
step_ns(lon, deg_free = 9) %>%
step_ns(tst_dt_num, deg_free = 7)  %>%
step_interact(terms = ~ enrl_grd:contains("sp_ed_fg")) %>%
step_interact(terms = ~ starts_with("ethnic"):ends_with("prop"))
rec %>% prep()
math_cv <- vfold_cv(math_train, strata = "ethnic_cd")
tune_mod <- linear_reg(penalty = tune(), mixture = tune())  %>%
set_mode("regression")  %>%
set_engine("glmnet")
grid_to_tune <- grid_regular(penalty(), mixture(), levels = 25)
enet_tune <- tune_grid(
tune_mod,
rec,
math_cv,
grid = grid_to_tune,
control = control_resamples(verbose = TRUE)
)
show_best(enet_tune, metric = "rmse")
select_best(enet_tune, metric = "rmse")
final_mod <- tune_mod  %>%
finalize_model(select_best(enet_tune, metric = "rmse"))
test_fit <- last_fit(final_mod, rec, math_split)
test_fit$.metrics
prepped_train <- rec  %>%
prep()  %>%
bake(math_train)  %>%
select(-contains("id"), -ncessch, -sch_name, -tst_dt)
prepped_train <- rec  %>%
prep()  %>%
bake(math_train)
View(prepped_train)
prepped_train <- rec  %>%
prep()  %>%
bake(math_train)  %>%
select(-contains("id"), -ncessch, -tst_dt)
real_test <-  read_csv(here::here("data", "final_merged_test.csv"),
col_types = cols(.default = col_guess()))
prepped_test <- rec  %>%
prep()  %>%
bake(real_test)
real_test <-  read_csv(here::here("data", "final_merged_test.csv"),
col_types = cols(.default = col_guess()))
prepped_test <- rec  %>%
prep()  %>%
bake(real_test)
full_train_fit <- fit(final_mod, score ~ ., prepped_train)
preds <- predict(full_train_fit, new_data = prepped_test)
pred_file <- tibble(Id = real_test$id, Predicted = preds$.pred)
write_csv(pred_file, here::here("data", "predict","preds-prelim1.csv"))
?write_csv
write_csv(pred_file, here::here("data", "predict","preds-prelim1.csv"))
test_fit$.metrics$.estimate
test_fit$.metrics
test_fit$.metrics[[2]]
test_fit$.metrics[[1]]
test_fit$.metrics[[1]]$.estimate
test_fit$.metrics[[1]]$.estimate[[1]]
knitr::opts_chunk$set(message = TRUE,
warning = FALSE,
echo = TRUE)
set.seed(210)
final_mod <- tune_mod  %>%
finalize_model(select_best(enet_tune, metric = "rmse"))
